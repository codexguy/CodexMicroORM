/***********************************************************************
Copyright 2017 CodeX Enterprises LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Major Changes:
12/2017    0.2     Initial release (Joel Champagne)
***********************************************************************/

/**********************************************************************

 REMEMBER: Much of this SQL script can and should be code generated!!
 (You would typically expect to write any custom retrieval procs,
 tailored and tuned as needed.)

**********************************************************************/

USE master
GO

CREATE DATABASE [CodexMicroORMTest]
GO

USE [CodexMicroORMTest]
GO

-- Note: this script was generated for moving schema items from CEFTestLocal to CEFTestLocal-Deploy on 2/13/2018 8:48:49 AM
-- If you plan to use this script with any other regions, please be sure to inspect it beforehand.  This was generated by jchampagne on machine CODEX08.

-- Also note that source control is turned off for this editor window, which is why it has been set to read-only

-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Schema [CEFTest]    Script Date: 2/13/2018 8:48:25 AM ******/
CREATE SCHEMA [CEFTest]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Schema [History]    Script Date: 2/13/2018 8:48:25 AM ******/
CREATE SCHEMA [History]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Schema [WTest]    Script Date: 2/13/2018 8:48:25 AM ******/
CREATE SCHEMA [WTest]
GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [History].[WidgetType](
	[HistID] [bigint] IDENTITY(1,1) NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[SKU] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Description] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [History].[WidgetStatus](
	[HistID] [bigint] IDENTITY(1,1) NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[ID] [tinyint] NOT NULL,
	[StatusDesc] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[StatusCode] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [History].[WidgetGroupItem](
	[HistID] [bigint] IDENTITY(1,1) NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[WidgetGroupID] [int] NOT NULL,
	[WidgetID] [int] NOT NULL,
	[TrackingNumber] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [History].[WidgetGroup](
	[HistID] [bigint] IDENTITY(1,1) NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[WidgetGroupID] [int] NOT NULL,
	[GroupNumber] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerID] [uniqueidentifier] NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [CEFTest].[PhoneType](
	[PhoneTypeID] [int] IDENTITY(1,1) NOT NULL,
	[PhoneTypeDesc] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [CEFTest].[Phone](
	[PhoneID] [int] IDENTITY(1,1) NOT NULL,
	[PhoneTypeID] [int] NOT NULL,
	[Number] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[PersonID] [int] NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [History].[Person](
	[HistID] [bigint] IDENTITY(1,1) NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[PersonID] [int] NOT NULL,
	[Name] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Age] [int] NOT NULL,
	[ParentPersonID] [int] NULL,
	[Gender] [char](1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [CEFTest].[Person](
	[PersonID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Age] [int] NOT NULL,
	[ParentPersonID] [int] NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[Gender] [char](1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [History].[Widget](
	[HistID] [bigint] IDENTITY(1,1) NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[WidgetID] [int] NOT NULL,
	[SKU] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SerialNumber] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CurrentStatusID] [tinyint] NOT NULL,
	[Cost] [money] NULL,
	[BilledAmount] [money] NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [History].[Shipment](
	[HistID] [bigint] IDENTITY(1,1) NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[WidgetGroupID] [int] NOT NULL,
	[BillingCustomerID] [uniqueidentifier] NULL,
	[ViaAddressLine] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ViaCity] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [History].[Receipt](
	[HistID] [bigint] IDENTITY(1,1) NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[WidgetGroupID] [int] NOT NULL,
	[FromAddressLine] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FromCity] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FinalDestAddressLine] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FinalDestCity] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [History].[Customer](
	[HistID] [bigint] IDENTITY(1,1) NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[CustomerID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[AddressLine] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[City] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [WTest].[WidgetReview](
	[SKU] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Username] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Rating] [tinyint] NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [WTest].[Customer](
	[CustomerID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[AddressLine] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[City] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [WTest].[WidgetStatus](
	[ID] [tinyint] NOT NULL,
	[StatusDesc] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[StatusCode] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [WTest].[WidgetType](
	[SKU] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Description] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [WTest].[Widget](
	[WidgetID] [int] IDENTITY(1,1) NOT NULL,
	[SKU] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SerialNumber] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CurrentStatusID] [tinyint] NOT NULL,
	[Cost] [money] NULL,
	[BilledAmount] [money] NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [History].[WidgetReview](
	[HistID] [bigint] IDENTITY(1,1) NOT NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[SKU] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Username] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Rating] [tinyint] NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [WTest].[WidgetGroup](
	[WidgetGroupID] [int] IDENTITY(1,1) NOT NULL,
	[GroupNumber] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerID] [uniqueidentifier] NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [WTest].[Receipt](
	[WidgetGroupID] [int] NOT NULL,
	[FromAddressLine] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FromCity] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FinalDestAddressLine] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FinalDestCity] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [WTest].[Shipment](
	[WidgetGroupID] [int] NOT NULL,
	[BillingCustomerID] [uniqueidentifier] NULL,
	[ViaAddressLine] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ViaCity] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [WTest].[WidgetGroupItem](
	[WidgetGroupID] [int] NOT NULL,
	[WidgetID] [int] NOT NULL,
	[TrackingNumber] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdatedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdatedDate] [datetime2](7) NOT NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]

GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_PADDING ON

GO

/****** Object:  Index [PK_WidgetType_History]    Script Date: 2/13/2018 8:48:30 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[History].[WidgetType]') AND name = N'PK_WidgetType_History')
ALTER TABLE [History].[WidgetType] ADD  CONSTRAINT [PK_WidgetType_History] PRIMARY KEY CLUSTERED 
(
	[SKU] ASC,
	[LastUpdatedDate] ASC,
	[HistID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK_WidgetStatus_History]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[History].[WidgetStatus]') AND name = N'PK_WidgetStatus_History')
ALTER TABLE [History].[WidgetStatus] ADD  CONSTRAINT [PK_WidgetStatus_History] PRIMARY KEY CLUSTERED 
(
	[ID] ASC,
	[LastUpdatedDate] ASC,
	[HistID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK_WidgetGroupItem_History]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[History].[WidgetGroupItem]') AND name = N'PK_WidgetGroupItem_History')
ALTER TABLE [History].[WidgetGroupItem] ADD  CONSTRAINT [PK_WidgetGroupItem_History] PRIMARY KEY CLUSTERED 
(
	[WidgetGroupID] ASC,
	[WidgetID] ASC,
	[LastUpdatedDate] ASC,
	[HistID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK_WidgetGroup_History]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[History].[WidgetGroup]') AND name = N'PK_WidgetGroup_History')
ALTER TABLE [History].[WidgetGroup] ADD  CONSTRAINT [PK_WidgetGroup_History] PRIMARY KEY CLUSTERED 
(
	[WidgetGroupID] ASC,
	[LastUpdatedDate] ASC,
	[HistID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK__PhoneTyp__F39F5BB9543FAE7C]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[CEFTest].[PhoneType]') AND name = N'PK__PhoneTyp__F39F5BB9543FAE7C')
ALTER TABLE [CEFTest].[PhoneType] ADD  CONSTRAINT [PK__PhoneTyp__F39F5BB9543FAE7C] PRIMARY KEY CLUSTERED 
(
	[PhoneTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK__Phone__F3EE4BD0FBB96228]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[CEFTest].[Phone]') AND name = N'PK__Phone__F3EE4BD0FBB96228')
ALTER TABLE [CEFTest].[Phone] ADD  CONSTRAINT [PK__Phone__F3EE4BD0FBB96228] PRIMARY KEY CLUSTERED 
(
	[PhoneID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK_Widget_History]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[History].[Widget]') AND name = N'PK_Widget_History')
ALTER TABLE [History].[Widget] ADD  CONSTRAINT [PK_Widget_History] PRIMARY KEY CLUSTERED 
(
	[WidgetID] ASC,
	[LastUpdatedDate] ASC,
	[HistID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK_Person_History]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[History].[Person]') AND name = N'PK_Person_History')
ALTER TABLE [History].[Person] ADD  CONSTRAINT [PK_Person_History] PRIMARY KEY CLUSTERED 
(
	[PersonID] ASC,
	[LastUpdatedDate] ASC,
	[HistID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK__Person__AA2FFB855E4FB0EC]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[CEFTest].[Person]') AND name = N'PK__Person__AA2FFB855E4FB0EC')
ALTER TABLE [CEFTest].[Person] ADD  CONSTRAINT [PK__Person__AA2FFB855E4FB0EC] PRIMARY KEY CLUSTERED 
(
	[PersonID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK_Shipment_History]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[History].[Shipment]') AND name = N'PK_Shipment_History')
ALTER TABLE [History].[Shipment] ADD  CONSTRAINT [PK_Shipment_History] PRIMARY KEY CLUSTERED 
(
	[WidgetGroupID] ASC,
	[LastUpdatedDate] ASC,
	[HistID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK_Receipt_History]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[History].[Receipt]') AND name = N'PK_Receipt_History')
ALTER TABLE [History].[Receipt] ADD  CONSTRAINT [PK_Receipt_History] PRIMARY KEY CLUSTERED 
(
	[WidgetGroupID] ASC,
	[LastUpdatedDate] ASC,
	[HistID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK_Customer_History]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[History].[Customer]') AND name = N'PK_Customer_History')
ALTER TABLE [History].[Customer] ADD  CONSTRAINT [PK_Customer_History] PRIMARY KEY CLUSTERED 
(
	[CustomerID] ASC,
	[LastUpdatedDate] ASC,
	[HistID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_PADDING ON

GO

/****** Object:  Index [PK__WidgetRe__8F2807526F882A67]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[WTest].[WidgetReview]') AND name = N'PK__WidgetRe__8F2807526F882A67')
ALTER TABLE [WTest].[WidgetReview] ADD  CONSTRAINT [PK__WidgetRe__8F2807526F882A67] PRIMARY KEY CLUSTERED 
(
	[SKU] ASC,
	[Username] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK__Customer__A4AE64B8EFC8F6B7]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[WTest].[Customer]') AND name = N'PK__Customer__A4AE64B8EFC8F6B7')
ALTER TABLE [WTest].[Customer] ADD  CONSTRAINT [PK__Customer__A4AE64B8EFC8F6B7] PRIMARY KEY CLUSTERED 
(
	[CustomerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK__WidgetSt__3214EC27690762DD]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[WTest].[WidgetStatus]') AND name = N'PK__WidgetSt__3214EC27690762DD')
ALTER TABLE [WTest].[WidgetStatus] ADD  CONSTRAINT [PK__WidgetSt__3214EC27690762DD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_PADDING ON

GO

/****** Object:  Index [PK__WidgetTy__CA1ECF0C5F04ABE1]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[WTest].[WidgetType]') AND name = N'PK__WidgetTy__CA1ECF0C5F04ABE1')
ALTER TABLE [WTest].[WidgetType] ADD  CONSTRAINT [PK__WidgetTy__CA1ECF0C5F04ABE1] PRIMARY KEY CLUSTERED 
(
	[SKU] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK__Widget__ADFD307230CBB036]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[WTest].[Widget]') AND name = N'PK__Widget__ADFD307230CBB036')
ALTER TABLE [WTest].[Widget] ADD  CONSTRAINT [PK__Widget__ADFD307230CBB036] PRIMARY KEY CLUSTERED 
(
	[WidgetID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_PADDING ON

GO

/****** Object:  Index [PK_WidgetReview_History]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[History].[WidgetReview]') AND name = N'PK_WidgetReview_History')
ALTER TABLE [History].[WidgetReview] ADD  CONSTRAINT [PK_WidgetReview_History] PRIMARY KEY CLUSTERED 
(
	[SKU] ASC,
	[Username] ASC,
	[LastUpdatedDate] ASC,
	[HistID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK__WidgetGr__0F185128E8CEB3EB]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[WTest].[WidgetGroup]') AND name = N'PK__WidgetGr__0F185128E8CEB3EB')
ALTER TABLE [WTest].[WidgetGroup] ADD  CONSTRAINT [PK__WidgetGr__0F185128E8CEB3EB] PRIMARY KEY CLUSTERED 
(
	[WidgetGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK__Receipt__0F185128B58A422B]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[WTest].[Receipt]') AND name = N'PK__Receipt__0F185128B58A422B')
ALTER TABLE [WTest].[Receipt] ADD  CONSTRAINT [PK__Receipt__0F185128B58A422B] PRIMARY KEY CLUSTERED 
(
	[WidgetGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK__Shipment__0F18512894653FCC]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[WTest].[Shipment]') AND name = N'PK__Shipment__0F18512894653FCC')
ALTER TABLE [WTest].[Shipment] ADD  CONSTRAINT [PK__Shipment__0F18512894653FCC] PRIMARY KEY CLUSTERED 
(
	[WidgetGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [PK__WidgetGr__35C7822FFE7A8033]    Script Date: 2/13/2018 8:48:31 AM ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[WTest].[WidgetGroupItem]') AND name = N'PK__WidgetGr__35C7822FFE7A8033')
ALTER TABLE [WTest].[WidgetGroupItem] ADD  CONSTRAINT [PK__WidgetGr__35C7822FFE7A8033] PRIMARY KEY CLUSTERED 
(
	[WidgetGroupID] ASC,
	[WidgetID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  View [WTest].[WidgetType_History]    Script Date: 2/13/2018 8:48:31 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [WTest].[WidgetType_History]
AS

WITH cte AS (
SELECT SKU
	, Description, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [WTest].[WidgetType]
UNION ALL
SELECT SKU
	, Description, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [History].[WidgetType]
)

SELECT
	SKU
	, Description, LastUpdatedBy, LastUpdatedDate, IsDeleted
	, ISNULL((SELECT TOP 1 b.LastUpdatedDate
		FROM cte b
		WHERE a.[SKU] = b.[SKU]
		AND b.LastUpdatedDate > a.LastUpdatedDate
		ORDER BY b.LastUpdatedDate), '12/31/9999') AS RowExpiryDate
FROM
	cte a
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  View [WTest].[WidgetStatus_History]    Script Date: 2/13/2018 8:48:31 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [WTest].[WidgetStatus_History]
AS

WITH cte AS (
SELECT ID
	, StatusDesc
	, StatusCode, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [WTest].[WidgetStatus]
UNION ALL
SELECT ID
	, StatusDesc
	, StatusCode, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [History].[WidgetStatus]
)

SELECT
	ID
	, StatusDesc
	, StatusCode, LastUpdatedBy, LastUpdatedDate, IsDeleted
	, ISNULL((SELECT TOP 1 b.LastUpdatedDate
		FROM cte b
		WHERE a.[ID] = b.[ID]
		AND b.LastUpdatedDate > a.LastUpdatedDate
		ORDER BY b.LastUpdatedDate), '12/31/9999') AS RowExpiryDate
FROM
	cte a
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  View [WTest].[WidgetGroupItem_History]    Script Date: 2/13/2018 8:48:31 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [WTest].[WidgetGroupItem_History]
AS

WITH cte AS (
SELECT WidgetGroupID
	, WidgetID
	, TrackingNumber, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [WTest].[WidgetGroupItem]
UNION ALL
SELECT WidgetGroupID
	, WidgetID
	, TrackingNumber, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [History].[WidgetGroupItem]
)

SELECT
	WidgetGroupID
	, WidgetID
	, TrackingNumber, LastUpdatedBy, LastUpdatedDate, IsDeleted
	, ISNULL((SELECT TOP 1 b.LastUpdatedDate
		FROM cte b
		WHERE a.[WidgetGroupID] = b.[WidgetGroupID]
		AND b.LastUpdatedDate > a.LastUpdatedDate
		ORDER BY b.LastUpdatedDate), '12/31/9999') AS RowExpiryDate
FROM
	cte a
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  View [WTest].[WidgetGroup_History]    Script Date: 2/13/2018 8:48:31 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [WTest].[WidgetGroup_History]
AS

WITH cte AS (
SELECT WidgetGroupID
	, GroupNumber
	, CustomerID, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [WTest].[WidgetGroup]
UNION ALL
SELECT WidgetGroupID
	, GroupNumber
	, CustomerID, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [History].[WidgetGroup]
)

SELECT
	WidgetGroupID
	, GroupNumber
	, CustomerID, LastUpdatedBy, LastUpdatedDate, IsDeleted
	, ISNULL((SELECT TOP 1 b.LastUpdatedDate
		FROM cte b
		WHERE a.[WidgetGroupID] = b.[WidgetGroupID]
		AND b.LastUpdatedDate > a.LastUpdatedDate
		ORDER BY b.LastUpdatedDate), '12/31/9999') AS RowExpiryDate
FROM
	cte a
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  View [WTest].[Widget_History]    Script Date: 2/13/2018 8:48:31 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [WTest].[Widget_History]
AS

WITH cte AS (
SELECT WidgetID
	, SKU
	, SerialNumber
	, CurrentStatusID
	, Cost
	, BilledAmount, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [WTest].[Widget]
UNION ALL
SELECT WidgetID
	, SKU
	, SerialNumber
	, CurrentStatusID
	, Cost
	, BilledAmount, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [History].[Widget]
)

SELECT
	WidgetID
	, SKU
	, SerialNumber
	, CurrentStatusID
	, Cost
	, BilledAmount, LastUpdatedBy, LastUpdatedDate, IsDeleted
	, ISNULL((SELECT TOP 1 b.LastUpdatedDate
		FROM cte b
		WHERE a.[WidgetID] = b.[WidgetID]
		AND b.LastUpdatedDate > a.LastUpdatedDate
		ORDER BY b.LastUpdatedDate), '12/31/9999') AS RowExpiryDate
FROM
	cte a
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  View [CEFTest].[Person_History]    Script Date: 2/13/2018 8:48:31 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [CEFTest].[Person_History]
AS

WITH cte AS (
SELECT PersonID
	, Name
	, Age
	, ParentPersonID
	, Gender, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [CEFTest].[Person]
UNION ALL
SELECT PersonID
	, Name
	, Age
	, ParentPersonID
	, Gender, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [History].[Person]
)

SELECT
	PersonID
	, Name
	, Age
	, ParentPersonID
	, Gender, LastUpdatedBy, LastUpdatedDate, IsDeleted
	, ISNULL((SELECT TOP 1 b.LastUpdatedDate
		FROM cte b
		WHERE a.[PersonID] = b.[PersonID]
		AND b.LastUpdatedDate > a.LastUpdatedDate
		ORDER BY b.LastUpdatedDate), '12/31/9999') AS RowExpiryDate
FROM
	cte a
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  View [WTest].[Shipment_History]    Script Date: 2/13/2018 8:48:32 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [WTest].[Shipment_History]
AS

WITH cte AS (
SELECT WidgetGroupID
	, BillingCustomerID
	, ViaAddressLine
	, ViaCity, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [WTest].[Shipment]
UNION ALL
SELECT WidgetGroupID
	, BillingCustomerID
	, ViaAddressLine
	, ViaCity, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [History].[Shipment]
)

SELECT
	WidgetGroupID
	, BillingCustomerID
	, ViaAddressLine
	, ViaCity, LastUpdatedBy, LastUpdatedDate, IsDeleted
	, ISNULL((SELECT TOP 1 b.LastUpdatedDate
		FROM cte b
		WHERE a.[WidgetGroupID] = b.[WidgetGroupID]
		AND b.LastUpdatedDate > a.LastUpdatedDate
		ORDER BY b.LastUpdatedDate), '12/31/9999') AS RowExpiryDate
FROM
	cte a
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  View [WTest].[Receipt_History]    Script Date: 2/13/2018 8:48:32 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [WTest].[Receipt_History]
AS

WITH cte AS (
SELECT WidgetGroupID
	, FromAddressLine
	, FromCity
	, FinalDestAddressLine
	, FinalDestCity, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [WTest].[Receipt]
UNION ALL
SELECT WidgetGroupID
	, FromAddressLine
	, FromCity
	, FinalDestAddressLine
	, FinalDestCity, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [History].[Receipt]
)

SELECT
	WidgetGroupID
	, FromAddressLine
	, FromCity
	, FinalDestAddressLine
	, FinalDestCity, LastUpdatedBy, LastUpdatedDate, IsDeleted
	, ISNULL((SELECT TOP 1 b.LastUpdatedDate
		FROM cte b
		WHERE a.[WidgetGroupID] = b.[WidgetGroupID]
		AND b.LastUpdatedDate > a.LastUpdatedDate
		ORDER BY b.LastUpdatedDate), '12/31/9999') AS RowExpiryDate
FROM
	cte a
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  View [WTest].[Customer_History]    Script Date: 2/13/2018 8:48:32 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [WTest].[Customer_History]
AS

WITH cte AS (
SELECT CustomerID
	, Name
	, AddressLine
	, City, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [WTest].[Customer]
UNION ALL
SELECT CustomerID
	, Name
	, AddressLine
	, City, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [History].[Customer]
)

SELECT
	CustomerID
	, Name
	, AddressLine
	, City, LastUpdatedBy, LastUpdatedDate, IsDeleted
	, ISNULL((SELECT TOP 1 b.LastUpdatedDate
		FROM cte b
		WHERE a.[CustomerID] = b.[CustomerID]
		AND b.LastUpdatedDate > a.LastUpdatedDate
		ORDER BY b.LastUpdatedDate), '12/31/9999') AS RowExpiryDate
FROM
	cte a
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  View [WTest].[WidgetReview_History]    Script Date: 2/13/2018 8:48:32 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [WTest].[WidgetReview_History]
AS

WITH cte AS (
SELECT SKU
	, Username
	, Rating, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [WTest].[WidgetReview]
UNION ALL
SELECT SKU
	, Username
	, Rating, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM [History].[WidgetReview]
)

SELECT
	SKU
	, Username
	, Rating, LastUpdatedBy, LastUpdatedDate, IsDeleted
	, ISNULL((SELECT TOP 1 b.LastUpdatedDate
		FROM cte b
		WHERE a.[SKU] = b.[SKU]
		AND b.LastUpdatedDate > a.LastUpdatedDate
		ORDER BY b.LastUpdatedDate), '12/31/9999') AS RowExpiryDate
FROM
	cte a
GO


-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [NDX_WidgetTypeHistory_LastUpdatedDate]    Script Date: 2/13/2018 8:48:35 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[History].[WidgetType]') AND c.[name] IN ('LastUpdatedDate'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_WidgetTypeHistory_LastUpdatedDate' AND i.[object_id]=OBJECT_ID(N'[History].[WidgetType]'))
CREATE NONCLUSTERED INDEX [NDX_WidgetTypeHistory_LastUpdatedDate] ON [History].[WidgetType]
(
	[LastUpdatedDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/* Error: Value cannot be null.
Parameter name: type
*/

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [NDX_WidgetStatusHistory_LastUpdatedDate]    Script Date: 2/13/2018 8:48:32 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[History].[WidgetStatus]') AND c.[name] IN ('LastUpdatedDate'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_WidgetStatusHistory_LastUpdatedDate' AND i.[object_id]=OBJECT_ID(N'[History].[WidgetStatus]'))
CREATE NONCLUSTERED INDEX [NDX_WidgetStatusHistory_LastUpdatedDate] ON [History].[WidgetStatus]
(
	[LastUpdatedDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [NDX_WidgetGroupItemHistory_LastUpdatedDate]    Script Date: 2/13/2018 8:48:32 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[History].[WidgetGroupItem]') AND c.[name] IN ('LastUpdatedDate'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_WidgetGroupItemHistory_LastUpdatedDate' AND i.[object_id]=OBJECT_ID(N'[History].[WidgetGroupItem]'))
CREATE NONCLUSTERED INDEX [NDX_WidgetGroupItemHistory_LastUpdatedDate] ON [History].[WidgetGroupItem]
(
	[LastUpdatedDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [NDX_WidgetGroupHistory_LastUpdatedDate]    Script Date: 2/13/2018 8:48:33 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[History].[WidgetGroup]') AND c.[name] IN ('LastUpdatedDate'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_WidgetGroupHistory_LastUpdatedDate' AND i.[object_id]=OBJECT_ID(N'[History].[WidgetGroup]'))
CREATE NONCLUSTERED INDEX [NDX_WidgetGroupHistory_LastUpdatedDate] ON [History].[WidgetGroup]
(
	[LastUpdatedDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_PADDING ON

GO

/****** Object:  Index [NDX_Phone_Owner]    Script Date: 2/13/2018 8:48:34 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[CEFTest].[Phone]') AND c.[name] IN ('PersonID','PhoneTypeID'))>=2 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_Phone_Owner' AND i.[object_id]=OBJECT_ID(N'[CEFTest].[Phone]'))
CREATE NONCLUSTERED INDEX [NDX_Phone_Owner] ON [CEFTest].[Phone]
(
	[PersonID] ASC,
	[PhoneTypeID] ASC
)
INCLUDE ( 	[Number]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [NDX_PersonHistory_LastUpdatedDate]    Script Date: 2/13/2018 8:48:35 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[History].[Person]') AND c.[name] IN ('LastUpdatedDate'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_PersonHistory_LastUpdatedDate' AND i.[object_id]=OBJECT_ID(N'[History].[Person]'))
CREATE NONCLUSTERED INDEX [NDX_PersonHistory_LastUpdatedDate] ON [History].[Person]
(
	[LastUpdatedDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_PADDING ON

GO

/****** Object:  Index [NDX_Person_ParentID]    Script Date: 2/13/2018 8:48:34 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[CEFTest].[Person]') AND c.[name] IN ('ParentPersonID'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_Person_ParentID' AND i.[object_id]=OBJECT_ID(N'[CEFTest].[Person]'))
CREATE NONCLUSTERED INDEX [NDX_Person_ParentID] ON [CEFTest].[Person]
(
	[ParentPersonID] ASC
)
INCLUDE ( 	[Gender],
	[Age]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_PADDING ON

GO

/****** Object:  Index [NDX_Person_Name]    Script Date: 2/13/2018 8:48:34 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[CEFTest].[Person]') AND c.[name] IN ('Name'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_Person_Name' AND i.[object_id]=OBJECT_ID(N'[CEFTest].[Person]'))
CREATE NONCLUSTERED INDEX [NDX_Person_Name] ON [CEFTest].[Person]
(
	[Name] ASC
)
INCLUDE ( 	[Gender],
	[Age]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [NDX_Person_Age]    Script Date: 2/13/2018 8:48:34 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[CEFTest].[Person]') AND c.[name] IN ('Age'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_Person_Age' AND i.[object_id]=OBJECT_ID(N'[CEFTest].[Person]'))
CREATE NONCLUSTERED INDEX [NDX_Person_Age] ON [CEFTest].[Person]
(
	[Age] ASC
)
INCLUDE ( 	[ParentPersonID],
	[PersonID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [NDX_WidgetHistory_LastUpdatedDate]    Script Date: 2/13/2018 8:48:36 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[History].[Widget]') AND c.[name] IN ('LastUpdatedDate'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_WidgetHistory_LastUpdatedDate' AND i.[object_id]=OBJECT_ID(N'[History].[Widget]'))
CREATE NONCLUSTERED INDEX [NDX_WidgetHistory_LastUpdatedDate] ON [History].[Widget]
(
	[LastUpdatedDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [NDX_ShipmentHistory_LastUpdatedDate]    Script Date: 2/13/2018 8:48:35 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[History].[Shipment]') AND c.[name] IN ('LastUpdatedDate'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_ShipmentHistory_LastUpdatedDate' AND i.[object_id]=OBJECT_ID(N'[History].[Shipment]'))
CREATE NONCLUSTERED INDEX [NDX_ShipmentHistory_LastUpdatedDate] ON [History].[Shipment]
(
	[LastUpdatedDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [NDX_ReceiptHistory_LastUpdatedDate]    Script Date: 2/13/2018 8:48:35 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[History].[Receipt]') AND c.[name] IN ('LastUpdatedDate'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_ReceiptHistory_LastUpdatedDate' AND i.[object_id]=OBJECT_ID(N'[History].[Receipt]'))
CREATE NONCLUSTERED INDEX [NDX_ReceiptHistory_LastUpdatedDate] ON [History].[Receipt]
(
	[LastUpdatedDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [NDX_CustomerHistory_LastUpdatedDate]    Script Date: 2/13/2018 8:48:35 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[History].[Customer]') AND c.[name] IN ('LastUpdatedDate'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_CustomerHistory_LastUpdatedDate' AND i.[object_id]=OBJECT_ID(N'[History].[Customer]'))
CREATE NONCLUSTERED INDEX [NDX_CustomerHistory_LastUpdatedDate] ON [History].[Customer]
(
	[LastUpdatedDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Index [NDX_WidgetReviewHistory_LastUpdatedDate]    Script Date: 2/13/2018 8:48:36 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[History].[WidgetReview]') AND c.[name] IN ('LastUpdatedDate'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_WidgetReviewHistory_LastUpdatedDate' AND i.[object_id]=OBJECT_ID(N'[History].[WidgetReview]'))
CREATE NONCLUSTERED INDEX [NDX_WidgetReviewHistory_LastUpdatedDate] ON [History].[WidgetReview]
(
	[LastUpdatedDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target

/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

SET ANSI_PADDING ON

GO

/****** Object:  Index [NDX_WidgetGroup_GroupNumber]    Script Date: 2/13/2018 8:48:36 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[WTest].[WidgetGroup]') AND c.[name] IN ('GroupNumber'))>=1 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_WidgetGroup_GroupNumber' AND i.[object_id]=OBJECT_ID(N'[WTest].[WidgetGroup]'))
CREATE UNIQUE NONCLUSTERED INDEX [NDX_WidgetGroup_GroupNumber] ON [WTest].[WidgetGroup]
(
	[GroupNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_WidgetType_u]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_WidgetType_u ON [WTest].[WidgetType] 
AFTER UPDATE 
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[WidgetType]
	(SKU
	, Description, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	SKU
	, Description, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d;

DELETE t
FROM
	[WTest].[WidgetType] t
	JOIN inserted i
		ON t.[SKU] = i.[SKU]
		AND i.IsDeleted = 1;

END
GO

ALTER TABLE [WTest].[WidgetType] ENABLE TRIGGER [tg_WidgetType_u]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_WidgetType_d]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_WidgetType_d ON [WTest].[WidgetType] 
FOR DELETE
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[WidgetType]
	(SKU
	, Description, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	SKU
	, Description, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d
WHERE
	IsDeleted = 1;

IF @@ROWCOUNT = 0
  IF EXISTS (SELECT 0 FROM deleted)
    RAISERROR('You cannot perform a physical delete on WidgetType.', 16, 1);

END
GO

ALTER TABLE [WTest].[WidgetType] ENABLE TRIGGER [tg_WidgetType_d]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_WidgetStatus_u]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_WidgetStatus_u ON [WTest].[WidgetStatus] 
AFTER UPDATE 
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[WidgetStatus]
	(ID
	, StatusDesc
	, StatusCode, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	ID
	, StatusDesc
	, StatusCode, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d;

DELETE t
FROM
	[WTest].[WidgetStatus] t
	JOIN inserted i
		ON t.[ID] = i.[ID]
		AND i.IsDeleted = 1;

END
GO

ALTER TABLE [WTest].[WidgetStatus] ENABLE TRIGGER [tg_WidgetStatus_u]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_WidgetStatus_d]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_WidgetStatus_d ON [WTest].[WidgetStatus] 
FOR DELETE
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[WidgetStatus]
	(ID
	, StatusDesc
	, StatusCode, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	ID
	, StatusDesc
	, StatusCode, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d
WHERE
	IsDeleted = 1;

IF @@ROWCOUNT = 0
  IF EXISTS (SELECT 0 FROM deleted)
    RAISERROR('You cannot perform a physical delete on WidgetStatus.', 16, 1);

END
GO

ALTER TABLE [WTest].[WidgetStatus] ENABLE TRIGGER [tg_WidgetStatus_d]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_WidgetGroupItem_u]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_WidgetGroupItem_u ON [WTest].[WidgetGroupItem] 
AFTER UPDATE 
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[WidgetGroupItem]
	(WidgetGroupID
	, WidgetID
	, TrackingNumber, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	WidgetGroupID
	, WidgetID
	, TrackingNumber, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d;

DELETE t
FROM
	[WTest].[WidgetGroupItem] t
	JOIN inserted i
		ON t.[WidgetGroupID] = i.[WidgetGroupID]
		AND i.IsDeleted = 1;

END
GO

ALTER TABLE [WTest].[WidgetGroupItem] ENABLE TRIGGER [tg_WidgetGroupItem_u]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_WidgetGroupItem_d]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_WidgetGroupItem_d ON [WTest].[WidgetGroupItem] 
FOR DELETE
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[WidgetGroupItem]
	(WidgetGroupID
	, WidgetID
	, TrackingNumber, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	WidgetGroupID
	, WidgetID
	, TrackingNumber, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d
WHERE
	IsDeleted = 1;

IF @@ROWCOUNT = 0
  IF EXISTS (SELECT 0 FROM deleted)
    RAISERROR('You cannot perform a physical delete on WidgetGroupItem.', 16, 1);

END
GO

ALTER TABLE [WTest].[WidgetGroupItem] ENABLE TRIGGER [tg_WidgetGroupItem_d]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_WidgetGroup_u]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_WidgetGroup_u ON [WTest].[WidgetGroup] 
AFTER UPDATE 
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[WidgetGroup]
	(WidgetGroupID
	, GroupNumber
	, CustomerID, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	WidgetGroupID
	, GroupNumber
	, CustomerID, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d;

DELETE t
FROM
	[WTest].[WidgetGroup] t
	JOIN inserted i
		ON t.[WidgetGroupID] = i.[WidgetGroupID]
		AND i.IsDeleted = 1;

END
GO

ALTER TABLE [WTest].[WidgetGroup] ENABLE TRIGGER [tg_WidgetGroup_u]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_WidgetGroup_d]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_WidgetGroup_d ON [WTest].[WidgetGroup] 
FOR DELETE
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[WidgetGroup]
	(WidgetGroupID
	, GroupNumber
	, CustomerID, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	WidgetGroupID
	, GroupNumber
	, CustomerID, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d
WHERE
	IsDeleted = 1;

IF @@ROWCOUNT = 0
  IF EXISTS (SELECT 0 FROM deleted)
    RAISERROR('You cannot perform a physical delete on WidgetGroup.', 16, 1);

END
GO

ALTER TABLE [WTest].[WidgetGroup] ENABLE TRIGGER [tg_WidgetGroup_d]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_Widget_u]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_Widget_u ON [WTest].[Widget] 
AFTER UPDATE 
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[Widget]
	(WidgetID
	, SKU
	, SerialNumber
	, CurrentStatusID
	, Cost
	, BilledAmount, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	WidgetID
	, SKU
	, SerialNumber
	, CurrentStatusID
	, Cost
	, BilledAmount, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d;

DELETE t
FROM
	[WTest].[Widget] t
	JOIN inserted i
		ON t.[WidgetID] = i.[WidgetID]
		AND i.IsDeleted = 1;

END
GO

ALTER TABLE [WTest].[Widget] ENABLE TRIGGER [tg_Widget_u]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_Widget_d]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_Widget_d ON [WTest].[Widget] 
FOR DELETE
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[Widget]
	(WidgetID
	, SKU
	, SerialNumber
	, CurrentStatusID
	, Cost
	, BilledAmount, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	WidgetID
	, SKU
	, SerialNumber
	, CurrentStatusID
	, Cost
	, BilledAmount, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d
WHERE
	IsDeleted = 1;

IF @@ROWCOUNT = 0
  IF EXISTS (SELECT 0 FROM deleted)
    RAISERROR('You cannot perform a physical delete on Widget.', 16, 1);

END
GO

ALTER TABLE [WTest].[Widget] ENABLE TRIGGER [tg_Widget_d]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [CEFTest].[tg_Person_u]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE  TRIGGER tg_Person_u ON [CEFTest].[Person] 
AFTER UPDATE 
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[Person]
	(PersonID
	, Name
	, Age
	, ParentPersonID
	, Gender, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	PersonID
	, Name
	, Age
	, ParentPersonID
	, Gender, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d;

DELETE t
FROM
	[CEFTest].[Person] t
	JOIN inserted i
		ON t.[PersonID] = i.[PersonID]
		AND i.IsDeleted = 1;

END
GO

ALTER TABLE [CEFTest].[Person] ENABLE TRIGGER [tg_Person_u]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [CEFTest].[tg_Person_d]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE  TRIGGER tg_Person_d ON [CEFTest].[Person] 
FOR DELETE
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[Person]
	(PersonID
	, Name
	, Age
	, ParentPersonID
	, Gender, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	PersonID
	, Name
	, Age
	, ParentPersonID
	, Gender, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d
WHERE
	IsDeleted = 1;

IF @@ROWCOUNT = 0
  IF EXISTS (SELECT 0 FROM deleted)
    RAISERROR('You cannot perform a physical delete on Person.', 16, 1);

END
GO

ALTER TABLE [CEFTest].[Person] ENABLE TRIGGER [tg_Person_d]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_Shipment_u]    Script Date: 2/13/2018 8:48:36 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_Shipment_u ON [WTest].[Shipment] 
AFTER UPDATE 
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[Shipment]
	(WidgetGroupID
	, BillingCustomerID
	, ViaAddressLine
	, ViaCity, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	WidgetGroupID
	, BillingCustomerID
	, ViaAddressLine
	, ViaCity, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d;

DELETE t
FROM
	[WTest].[Shipment] t
	JOIN inserted i
		ON t.[WidgetGroupID] = i.[WidgetGroupID]
		AND i.IsDeleted = 1;

END
GO

ALTER TABLE [WTest].[Shipment] ENABLE TRIGGER [tg_Shipment_u]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_Shipment_d]    Script Date: 2/13/2018 8:48:37 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_Shipment_d ON [WTest].[Shipment] 
FOR DELETE
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[Shipment]
	(WidgetGroupID
	, BillingCustomerID
	, ViaAddressLine
	, ViaCity, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	WidgetGroupID
	, BillingCustomerID
	, ViaAddressLine
	, ViaCity, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d
WHERE
	IsDeleted = 1;

IF @@ROWCOUNT = 0
  IF EXISTS (SELECT 0 FROM deleted)
    RAISERROR('You cannot perform a physical delete on Shipment.', 16, 1);

END
GO

ALTER TABLE [WTest].[Shipment] ENABLE TRIGGER [tg_Shipment_d]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_Receipt_u]    Script Date: 2/13/2018 8:48:37 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_Receipt_u ON [WTest].[Receipt] 
AFTER UPDATE 
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[Receipt]
	(WidgetGroupID
	, FromAddressLine
	, FromCity
	, FinalDestAddressLine
	, FinalDestCity, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	WidgetGroupID
	, FromAddressLine
	, FromCity
	, FinalDestAddressLine
	, FinalDestCity, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d;

DELETE t
FROM
	[WTest].[Receipt] t
	JOIN inserted i
		ON t.[WidgetGroupID] = i.[WidgetGroupID]
		AND i.IsDeleted = 1;

END
GO

ALTER TABLE [WTest].[Receipt] ENABLE TRIGGER [tg_Receipt_u]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_Receipt_d]    Script Date: 2/13/2018 8:48:37 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_Receipt_d ON [WTest].[Receipt] 
FOR DELETE
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[Receipt]
	(WidgetGroupID
	, FromAddressLine
	, FromCity
	, FinalDestAddressLine
	, FinalDestCity, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	WidgetGroupID
	, FromAddressLine
	, FromCity
	, FinalDestAddressLine
	, FinalDestCity, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d
WHERE
	IsDeleted = 1;

IF @@ROWCOUNT = 0
  IF EXISTS (SELECT 0 FROM deleted)
    RAISERROR('You cannot perform a physical delete on Receipt.', 16, 1);

END
GO

ALTER TABLE [WTest].[Receipt] ENABLE TRIGGER [tg_Receipt_d]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_Customer_u]    Script Date: 2/13/2018 8:48:37 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_Customer_u ON [WTest].[Customer] 
AFTER UPDATE 
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[Customer]
	(CustomerID
	, Name
	, AddressLine
	, City, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	CustomerID
	, Name
	, AddressLine
	, City, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d;

DELETE t
FROM
	[WTest].[Customer] t
	JOIN inserted i
		ON t.[CustomerID] = i.[CustomerID]
		AND i.IsDeleted = 1;

END
GO

ALTER TABLE [WTest].[Customer] ENABLE TRIGGER [tg_Customer_u]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_Customer_d]    Script Date: 2/13/2018 8:48:37 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_Customer_d ON [WTest].[Customer] 
FOR DELETE
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[Customer]
	(CustomerID
	, Name
	, AddressLine
	, City, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	CustomerID
	, Name
	, AddressLine
	, City, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d
WHERE
	IsDeleted = 1;

IF @@ROWCOUNT = 0
  IF EXISTS (SELECT 0 FROM deleted)
    RAISERROR('You cannot perform a physical delete on Customer.', 16, 1);

END
GO

ALTER TABLE [WTest].[Customer] ENABLE TRIGGER [tg_Customer_d]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_WidgetReview_u]    Script Date: 2/13/2018 8:48:37 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_WidgetReview_u ON [WTest].[WidgetReview] 
AFTER UPDATE 
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[WidgetReview]
	(SKU
	, Username
	, Rating, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	SKU
	, Username
	, Rating, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d;

DELETE t
FROM
	[WTest].[WidgetReview] t
	JOIN inserted i
		ON t.[SKU] = i.[SKU]
		AND i.IsDeleted = 1;

END
GO

ALTER TABLE [WTest].[WidgetReview] ENABLE TRIGGER [tg_WidgetReview_u]
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  Trigger [WTest].[tg_WidgetReview_d]    Script Date: 2/13/2018 8:48:37 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  TRIGGER tg_WidgetReview_d ON [WTest].[WidgetReview] 
FOR DELETE
AS
BEGIN
/*
<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
*/
SET NOCOUNT ON;

INSERT [History].[WidgetReview]
	(SKU
	, Username
	, Rating, LastUpdatedBy, LastUpdatedDate, IsDeleted)
SELECT
	SKU
	, Username
	, Rating, LastUpdatedBy, LastUpdatedDate, IsDeleted
FROM
	deleted d
WHERE
	IsDeleted = 1;

IF @@ROWCOUNT = 0
  IF EXISTS (SELECT 0 FROM deleted)
    RAISERROR('You cannot perform a physical delete on WidgetReview.', 16, 1);

END
GO

ALTER TABLE [WTest].[WidgetReview] ENABLE TRIGGER [tg_WidgetReview_d]
GO


-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetGroupItem]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[WTest].[WidgetGroupItem]'))
	ALTER TABLE [WTest].[WidgetGroupItem] ADD CONSTRAINT [DF__WidgetGro__LastU__02084FDA] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetGroupItem]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[WTest].[WidgetGroupItem]'))
	ALTER TABLE [WTest].[WidgetGroupItem] ADD CONSTRAINT [DF__WidgetGro__LastU__02FC7413] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetGroupItem]') and c.[name]='IsDeleted') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='IsDeleted' AND o.[object_id]=object_id('[WTest].[WidgetGroupItem]'))
	ALTER TABLE [WTest].[WidgetGroupItem] ADD CONSTRAINT [DF__WidgetGro__IsDel__03F0984C] DEFAULT ((0)) FOR [IsDeleted]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetGroup]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[WTest].[WidgetGroup]'))
	ALTER TABLE [WTest].[WidgetGroup] ADD CONSTRAINT [DF__WidgetGro__LastU__0A9D95DB] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetGroup]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[WTest].[WidgetGroup]'))
	ALTER TABLE [WTest].[WidgetGroup] ADD CONSTRAINT [DF__WidgetGro__LastU__0B91BA14] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetGroup]') and c.[name]='IsDeleted') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='IsDeleted' AND o.[object_id]=object_id('[WTest].[WidgetGroup]'))
	ALTER TABLE [WTest].[WidgetGroup] ADD CONSTRAINT [DF__WidgetGro__IsDel__0C85DE4D] DEFAULT ((0)) FOR [IsDeleted]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Widget]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[WTest].[Widget]'))
	ALTER TABLE [WTest].[Widget] ADD CONSTRAINT [DF__Widget__LastUpda__1332DBDC] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Widget]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[WTest].[Widget]'))
	ALTER TABLE [WTest].[Widget] ADD CONSTRAINT [DF__Widget__LastUpda__14270015] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Widget]') and c.[name]='IsDeleted') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='IsDeleted' AND o.[object_id]=object_id('[WTest].[Widget]'))
	ALTER TABLE [WTest].[Widget] ADD CONSTRAINT [DF__Widget__IsDelete__151B244E] DEFAULT ((0)) FOR [IsDeleted]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Shipment]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[WTest].[Shipment]'))
	ALTER TABLE [WTest].[Shipment] ADD CONSTRAINT [DF__Shipment__LastUp__1BC821DD] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Shipment]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[WTest].[Shipment]'))
	ALTER TABLE [WTest].[Shipment] ADD CONSTRAINT [DF__Shipment__LastUp__1CBC4616] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Shipment]') and c.[name]='IsDeleted') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='IsDeleted' AND o.[object_id]=object_id('[WTest].[Shipment]'))
	ALTER TABLE [WTest].[Shipment] ADD CONSTRAINT [DF__Shipment__IsDele__1DB06A4F] DEFAULT ((0)) FOR [IsDeleted]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Receipt]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[WTest].[Receipt]'))
	ALTER TABLE [WTest].[Receipt] ADD CONSTRAINT [DF__Receipt__LastUpd__245D67DE] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Receipt]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[WTest].[Receipt]'))
	ALTER TABLE [WTest].[Receipt] ADD CONSTRAINT [DF__Receipt__LastUpd__25518C17] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Receipt]') and c.[name]='IsDeleted') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='IsDeleted' AND o.[object_id]=object_id('[WTest].[Receipt]'))
	ALTER TABLE [WTest].[Receipt] ADD CONSTRAINT [DF__Receipt__IsDelet__2645B050] DEFAULT ((0)) FOR [IsDeleted]
GO

-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

ALTER TABLE [CEFTest].[Phone]  WITH NOCHECK ADD  CONSTRAINT [FK__Phone__PhoneType__04115F34] FOREIGN KEY([PhoneTypeID])
REFERENCES [CEFTest].[PhoneType] ([PhoneTypeID])
GO

ALTER TABLE [CEFTest].[Phone] CHECK CONSTRAINT [FK__Phone__PhoneType__04115F34]
GO



-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Customer]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[WTest].[Customer]'))
	ALTER TABLE [WTest].[Customer] ADD CONSTRAINT [DF__Customer__LastUp__2CF2ADDF] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[CEFTest].[Person]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[CEFTest].[Person]'))
	ALTER TABLE [CEFTest].[Person] ADD CONSTRAINT [DF__Person__LastUpda__0505836D] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Customer]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[WTest].[Customer]'))
	ALTER TABLE [WTest].[Customer] ADD CONSTRAINT [DF__Customer__LastUp__2DE6D218] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[CEFTest].[Person]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[CEFTest].[Person]'))
	ALTER TABLE [CEFTest].[Person] ADD CONSTRAINT [DF__Person__LastUpda__05F9A7A6] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Customer]') and c.[name]='IsDeleted') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='IsDeleted' AND o.[object_id]=object_id('[WTest].[Customer]'))
	ALTER TABLE [WTest].[Customer] ADD CONSTRAINT [DF__Customer__IsDele__2EDAF651] DEFAULT ((0)) FOR [IsDeleted]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[CEFTest].[Phone]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[CEFTest].[Phone]'))
	ALTER TABLE [CEFTest].[Phone] ADD CONSTRAINT [DF__Phone__LastUpdat__0ABE5CC3] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[CEFTest].[Phone]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[CEFTest].[Phone]'))
	ALTER TABLE [CEFTest].[Phone] ADD CONSTRAINT [DF__Phone__LastUpdat__0BB280FC] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[CEFTest].[PhoneType]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[CEFTest].[PhoneType]'))
	ALTER TABLE [CEFTest].[PhoneType] ADD CONSTRAINT [DF__PhoneType__LastU__1CDD0CFE] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[CEFTest].[PhoneType]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[CEFTest].[PhoneType]'))
	ALTER TABLE [CEFTest].[PhoneType] ADD CONSTRAINT [DF__PhoneType__LastU__1DD13137] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

ALTER TABLE [CEFTest].[Phone]  WITH NOCHECK ADD  CONSTRAINT [FK__Phone__PersonID__32CC4E1D] FOREIGN KEY([PersonID])
REFERENCES [CEFTest].[Person] ([PersonID])
GO

ALTER TABLE [CEFTest].[Phone] CHECK CONSTRAINT [FK__Phone__PersonID__32CC4E1D]
GO



-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[CEFTest].[Person]') and c.[name]='IsDeleted') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='IsDeleted' AND o.[object_id]=object_id('[CEFTest].[Person]'))
	ALTER TABLE [CEFTest].[Person] ADD CONSTRAINT [DF__Person__IsDelete__420E91AD] DEFAULT ((0)) FOR [IsDeleted]
GO

-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

ALTER TABLE [CEFTest].[Person]  WITH NOCHECK ADD  CONSTRAINT [FK__Person__ParentPe__7F4CAA17] FOREIGN KEY([ParentPersonID])
REFERENCES [CEFTest].[Person] ([PersonID])
GO

ALTER TABLE [CEFTest].[Person] CHECK CONSTRAINT [FK__Person__ParentPe__7F4CAA17]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

ALTER TABLE [WTest].[WidgetReview]  WITH CHECK ADD  CONSTRAINT [FK__WidgetRevie__SKU__55BFB948] FOREIGN KEY([SKU])
REFERENCES [WTest].[WidgetType] ([SKU])
GO

ALTER TABLE [WTest].[WidgetReview] CHECK CONSTRAINT [FK__WidgetRevie__SKU__55BFB948]
GO



-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetReview]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[WTest].[WidgetReview]'))
	ALTER TABLE [WTest].[WidgetReview] ADD CONSTRAINT [DF__WidgetRev__LastU__56B3DD81] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetReview]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[WTest].[WidgetReview]'))
	ALTER TABLE [WTest].[WidgetReview] ADD CONSTRAINT [DF__WidgetRev__LastU__57A801BA] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetReview]') and c.[name]='IsDeleted') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='IsDeleted' AND o.[object_id]=object_id('[WTest].[WidgetReview]'))
	ALTER TABLE [WTest].[WidgetReview] ADD CONSTRAINT [DF__WidgetRev__IsDel__589C25F3] DEFAULT ((0)) FOR [IsDeleted]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[Customer]') and c.[name]='CustomerID') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='CustomerID' AND o.[object_id]=object_id('[WTest].[Customer]'))
	ALTER TABLE [WTest].[Customer] ADD CONSTRAINT [DF__Customer__Custom__5CD6CB2B] DEFAULT (newid()) FOR [CustomerID]
GO

-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

ALTER TABLE [WTest].[Widget]  WITH CHECK ADD  CONSTRAINT [FK__Widget__SKU__6383C8BA] FOREIGN KEY([SKU])
REFERENCES [WTest].[WidgetType] ([SKU])
GO

ALTER TABLE [WTest].[Widget] CHECK CONSTRAINT [FK__Widget__SKU__6383C8BA]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

ALTER TABLE [WTest].[Widget]  WITH CHECK ADD  CONSTRAINT [FK__Widget__CurrentS__6477ECF3] FOREIGN KEY([CurrentStatusID])
REFERENCES [WTest].[WidgetStatus] ([ID])
GO

ALTER TABLE [WTest].[Widget] CHECK CONSTRAINT [FK__Widget__CurrentS__6477ECF3]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

ALTER TABLE [WTest].[WidgetGroup]  WITH CHECK ADD  CONSTRAINT [FK__WidgetGro__Custo__6754599E] FOREIGN KEY([CustomerID])
REFERENCES [WTest].[Customer] ([CustomerID])
GO

ALTER TABLE [WTest].[WidgetGroup] CHECK CONSTRAINT [FK__WidgetGro__Custo__6754599E]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

ALTER TABLE [WTest].[Shipment]  WITH CHECK ADD  CONSTRAINT [FK__Shipment__Billin__6C190EBB] FOREIGN KEY([BillingCustomerID])
REFERENCES [WTest].[Customer] ([CustomerID])
GO

ALTER TABLE [WTest].[Shipment] CHECK CONSTRAINT [FK__Shipment__Billin__6C190EBB]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

ALTER TABLE [WTest].[WidgetGroupItem]  WITH CHECK ADD  CONSTRAINT [FK__WidgetGro__Widge__6EF57B66] FOREIGN KEY([WidgetGroupID])
REFERENCES [WTest].[WidgetGroup] ([WidgetGroupID])
GO

ALTER TABLE [WTest].[WidgetGroupItem] CHECK CONSTRAINT [FK__WidgetGro__Widge__6EF57B66]
GO



-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

ALTER TABLE [WTest].[WidgetGroupItem]  WITH CHECK ADD  CONSTRAINT [FK__WidgetGro__Widge__6FE99F9F] FOREIGN KEY([WidgetID])
REFERENCES [WTest].[Widget] ([WidgetID])
GO

ALTER TABLE [WTest].[WidgetGroupItem] CHECK CONSTRAINT [FK__WidgetGro__Widge__6FE99F9F]
GO



-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetType]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[WTest].[WidgetType]'))
	ALTER TABLE [WTest].[WidgetType] ADD CONSTRAINT [DF__WidgetTyp__LastU__70DDC3D8] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

ALTER TABLE [CEFTest].[Person] ADD CONSTRAINT [CK__Person__Gender__719CDDE7] CHECK ([Gender] IS NULL OR [Gender]='M' OR [Gender]='F')
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetType]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[WTest].[WidgetType]'))
	ALTER TABLE [WTest].[WidgetType] ADD CONSTRAINT [DF__WidgetTyp__LastU__71D1E811] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetType]') and c.[name]='IsDeleted') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='IsDeleted' AND o.[object_id]=object_id('[WTest].[WidgetType]'))
	ALTER TABLE [WTest].[WidgetType] ADD CONSTRAINT [DF__WidgetTyp__IsDel__72C60C4A] DEFAULT ((0)) FOR [IsDeleted]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetStatus]') and c.[name]='LastUpdatedBy') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedBy' AND o.[object_id]=object_id('[WTest].[WidgetStatus]'))
	ALTER TABLE [WTest].[WidgetStatus] ADD CONSTRAINT [DF__WidgetSta__LastU__797309D9] DEFAULT (suser_sname()) FOR [LastUpdatedBy]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetStatus]') and c.[name]='LastUpdatedDate') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='LastUpdatedDate' AND o.[object_id]=object_id('[WTest].[WidgetStatus]'))
	ALTER TABLE [WTest].[WidgetStatus] ADD CONSTRAINT [DF__WidgetSta__LastU__7A672E12] DEFAULT (sysutcdatetime()) FOR [LastUpdatedDate]
GO

-- This is how it looks in source and would be executed in target

IF NOT EXISTS (select 0 from sys.columns c join sys.objects o on c.default_object_id=o.[object_id] join sys.objects p on o.parent_object_id=p.[object_id] where p.[object_id]=object_id('[WTest].[WidgetStatus]') and c.[name]='IsDeleted') AND EXISTS (select 0 FROM sys.columns c JOIN sys.objects o ON c.[object_id]=o.[object_id] AND c.[name]='IsDeleted' AND o.[object_id]=object_id('[WTest].[WidgetStatus]'))
	ALTER TABLE [WTest].[WidgetStatus] ADD CONSTRAINT [DF__WidgetSta__IsDel__7B5B524B] DEFAULT ((0)) FOR [IsDeleted]
GO

-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetType_d]    Script Date: 2/13/2018 8:48:39 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetType_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @SKU varchar(20)
    , @LastUpdatedBy varchar(50) = NULL
    , @LastUpdatedDate datetime2 = NULL
AS
/***********************************************************
Name:  WTest.up_WidgetType_d
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Standard delete procedure for WidgetType

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''



UPDATE [WTest].[WidgetType]
SET
	IsDeleted = 1,
	LastUpdatedBy = @LastUpdatedBy,
	LastUpdatedDate = SYSUTCDATETIME()
WHERE
	WTest.WidgetType.SKU = @SKU
AND LastUpdatedDate = @LastUpdatedDate

SELECT @__e = @@ERROR, @__r = @@ROWCOUNT

IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is WidgetType.)'
END


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetType_u]    Script Date: 2/13/2018 8:48:39 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetType_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@SKU varchar(20)
	, @Description nvarchar(200)
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_WidgetType_u    
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Standard update procedure for WidgetType

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


UPDATE [WTest].[WidgetType]
SET
	Description = @Description
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	WTest.WidgetType.SKU = @SKU
-- Concurrency checking
AND	[WTest].[WidgetType].LastUpdatedDate = @LastUpdatedDate


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is WidgetType.)'
END


-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetType_i]    Script Date: 2/13/2018 8:48:39 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetType_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@SKU varchar(20) = NULL OUTPUT
	, @Description nvarchar(200) 
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_WidgetType_i
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Standard insert procedure for WidgetType

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()

INSERT INTO [WTest].[WidgetType] (
	SKU
	, Description
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@SKU
	, @Description
	, @LastUpdatedBy
	, @LastUpdatedDate )


RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetType_ByKey]    Script Date: 2/13/2018 8:48:39 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetType_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@SKU varchar(20) = NULL
AS
/***********************************************************
Name:  WTest.up_WidgetType_ByKey
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Selects specific record from WidgetType, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	SKU
	, Description
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[WTest].[WidgetType]
WHERE
	SKU = @SKU

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'WidgetType retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetStatus_d]    Script Date: 2/13/2018 8:48:39 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetStatus_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @ID tinyint
    , @LastUpdatedBy varchar(50) = NULL
    , @LastUpdatedDate datetime2 = NULL
AS
/***********************************************************
Name:  WTest.up_WidgetStatus_d
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Standard delete procedure for WidgetStatus

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''



UPDATE [WTest].[WidgetStatus]
SET
	IsDeleted = 1,
	LastUpdatedBy = @LastUpdatedBy,
	LastUpdatedDate = SYSUTCDATETIME()
WHERE
	WTest.WidgetStatus.ID = @ID
AND LastUpdatedDate = @LastUpdatedDate

SELECT @__e = @@ERROR, @__r = @@ROWCOUNT

IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is WidgetStatus.)'
END


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetStatus_u]    Script Date: 2/13/2018 8:48:39 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetStatus_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@ID tinyint
	, @StatusDesc varchar(100)
	, @StatusCode varchar(20)
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_WidgetStatus_u    
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Standard update procedure for WidgetStatus

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


UPDATE [WTest].[WidgetStatus]
SET
	StatusDesc = @StatusDesc
	, StatusCode = @StatusCode
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	WTest.WidgetStatus.ID = @ID
-- Concurrency checking
AND	[WTest].[WidgetStatus].LastUpdatedDate = @LastUpdatedDate


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is WidgetStatus.)'
END


-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetStatus_i]    Script Date: 2/13/2018 8:48:40 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetStatus_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@ID tinyint = NULL OUTPUT
	, @StatusDesc varchar(100) 
	, @StatusCode varchar(20) 
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_WidgetStatus_i
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Standard insert procedure for WidgetStatus

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()

INSERT INTO [WTest].[WidgetStatus] (
	ID
	, StatusDesc
	, StatusCode
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@ID
	, @StatusDesc
	, @StatusCode
	, @LastUpdatedBy
	, @LastUpdatedDate )


RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetStatus_ByKey]    Script Date: 2/13/2018 8:48:41 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetStatus_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@ID tinyint = NULL
AS
/***********************************************************
Name:  WTest.up_WidgetStatus_ByKey
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Selects specific record from WidgetStatus, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	ID
	, StatusDesc
	, StatusCode
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[WTest].[WidgetStatus]
WHERE
	ID = @ID

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'WidgetStatus retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetGroupItem_d]    Script Date: 2/13/2018 8:48:40 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetGroupItem_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @WidgetGroupID int
	, @WidgetID int
    , @LastUpdatedBy varchar(50) = NULL
    , @LastUpdatedDate datetime2 = NULL
AS
/***********************************************************
Name:  WTest.up_WidgetGroupItem_d
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Standard delete procedure for WidgetGroupItem

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''



UPDATE [WTest].[WidgetGroupItem]
SET
	IsDeleted = 1,
	LastUpdatedBy = @LastUpdatedBy,
	LastUpdatedDate = SYSUTCDATETIME()
WHERE
	WTest.WidgetGroupItem.WidgetGroupID = @WidgetGroupID AND WTest.WidgetGroupItem.WidgetID = @WidgetID
AND LastUpdatedDate = @LastUpdatedDate

SELECT @__e = @@ERROR, @__r = @@ROWCOUNT

IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is WidgetGroupItem.)'
END


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetGroupItem_u]    Script Date: 2/13/2018 8:48:40 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetGroupItem_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int
	, @WidgetID int
	, @TrackingNumber varchar(20)
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_WidgetGroupItem_u    
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Standard update procedure for WidgetGroupItem

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


UPDATE [WTest].[WidgetGroupItem]
SET
	TrackingNumber = @TrackingNumber
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	WTest.WidgetGroupItem.WidgetGroupID = @WidgetGroupID AND WTest.WidgetGroupItem.WidgetID = @WidgetID
-- Concurrency checking
AND	[WTest].[WidgetGroupItem].LastUpdatedDate = @LastUpdatedDate


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is WidgetGroupItem.)'
END


-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetGroupItem_i]    Script Date: 2/13/2018 8:48:40 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetGroupItem_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int = NULL OUTPUT
	, @WidgetID int = NULL OUTPUT
	, @TrackingNumber varchar(20) = NULL
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_WidgetGroupItem_i
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Standard insert procedure for WidgetGroupItem

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()

INSERT INTO [WTest].[WidgetGroupItem] (
	WidgetGroupID
	, WidgetID
	, TrackingNumber
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@WidgetGroupID
	, @WidgetID
	, @TrackingNumber
	, @LastUpdatedBy
	, @LastUpdatedDate )


RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetGroupItem_ByKey]    Script Date: 2/13/2018 8:48:42 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetGroupItem_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int = NULL
	, @WidgetID int = NULL
AS
/***********************************************************
Name:  WTest.up_WidgetGroupItem_ByKey
Date: 2/6/2018 4:02 PM
Author: System-generated
Description: Selects specific record from WidgetGroupItem, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL, NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	WidgetGroupID
	, WidgetID
	, TrackingNumber
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[WTest].[WidgetGroupItem]
WHERE
	WidgetGroupID = @WidgetGroupID AND WidgetID = @WidgetID

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'WidgetGroupItem retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetGroup_d]    Script Date: 2/13/2018 8:48:40 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetGroup_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @WidgetGroupID int
    , @LastUpdatedBy varchar(50) = NULL
    , @LastUpdatedDate datetime2 = NULL
AS
/***********************************************************
Name:  WTest.up_WidgetGroup_d
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard delete procedure for WidgetGroup

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''



UPDATE [WTest].[WidgetGroup]
SET
	IsDeleted = 1,
	LastUpdatedBy = @LastUpdatedBy,
	LastUpdatedDate = SYSUTCDATETIME()
WHERE
	WTest.WidgetGroup.WidgetGroupID = @WidgetGroupID
AND LastUpdatedDate = @LastUpdatedDate

SELECT @__e = @@ERROR, @__r = @@ROWCOUNT

IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is WidgetGroup.)'
END


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetGroup_u]    Script Date: 2/13/2018 8:48:41 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetGroup_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int
	, @GroupNumber varchar(20)
	, @CustomerID uniqueidentifier
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_WidgetGroup_u    
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard update procedure for WidgetGroup

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


UPDATE [WTest].[WidgetGroup]
SET
	GroupNumber = @GroupNumber
	, CustomerID = @CustomerID
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	WTest.WidgetGroup.WidgetGroupID = @WidgetGroupID
-- Concurrency checking
AND	[WTest].[WidgetGroup].LastUpdatedDate = @LastUpdatedDate


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is WidgetGroup.)'
END


-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetGroup_i]    Script Date: 2/13/2018 8:48:42 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetGroup_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int = NULL OUTPUT
	, @GroupNumber varchar(20) 
	, @CustomerID uniqueidentifier = NULL
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_WidgetGroup_i
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard insert procedure for WidgetGroup

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()

INSERT INTO [WTest].[WidgetGroup] (
	GroupNumber
	, CustomerID
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@GroupNumber
	, @CustomerID
	, @LastUpdatedBy
	, @LastUpdatedDate )

SET @WidgetGroupID = SCOPE_IDENTITY()
RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetGroup_ByKey]    Script Date: 2/13/2018 8:48:41 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetGroup_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int = NULL
AS
/***********************************************************
Name:  WTest.up_WidgetGroup_ByKey
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Selects specific record from WidgetGroup, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	WidgetGroupID
	, GroupNumber
	, CustomerID
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[WTest].[WidgetGroup]
WHERE
	WidgetGroupID = @WidgetGroupID

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'WidgetGroup retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Widget_d]    Script Date: 2/13/2018 8:48:42 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Widget_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @WidgetID int
    , @LastUpdatedBy varchar(50) = NULL
    , @LastUpdatedDate datetime2 = NULL
AS
/***********************************************************
Name:  WTest.up_Widget_d
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard delete procedure for Widget

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''



UPDATE [WTest].[Widget]
SET
	IsDeleted = 1,
	LastUpdatedBy = @LastUpdatedBy,
	LastUpdatedDate = SYSUTCDATETIME()
WHERE
	WTest.Widget.WidgetID = @WidgetID
AND LastUpdatedDate = @LastUpdatedDate

SELECT @__e = @@ERROR, @__r = @@ROWCOUNT

IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is Widget.)'
END


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Widget_u]    Script Date: 2/13/2018 8:48:41 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Widget_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetID int
	, @SKU varchar(20)
	, @SerialNumber varchar(20)
	, @CurrentStatusID tinyint
	, @Cost money
	, @BilledAmount money
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_Widget_u    
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard update procedure for Widget

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


UPDATE [WTest].[Widget]
SET
	SKU = @SKU
	, SerialNumber = @SerialNumber
	, CurrentStatusID = @CurrentStatusID
	, Cost = @Cost
	, BilledAmount = @BilledAmount
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	WTest.Widget.WidgetID = @WidgetID
-- Concurrency checking
AND	[WTest].[Widget].LastUpdatedDate = @LastUpdatedDate


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is Widget.)'
END


-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Widget_i]    Script Date: 2/13/2018 8:48:43 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Widget_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetID int = NULL OUTPUT
	, @SKU varchar(20) 
	, @SerialNumber varchar(20) 
	, @CurrentStatusID tinyint 
	, @Cost money = NULL
	, @BilledAmount money = NULL
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_Widget_i
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard insert procedure for Widget

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()

INSERT INTO [WTest].[Widget] (
	SKU
	, SerialNumber
	, CurrentStatusID
	, Cost
	, BilledAmount
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@SKU
	, @SerialNumber
	, @CurrentStatusID
	, @Cost
	, @BilledAmount
	, @LastUpdatedBy
	, @LastUpdatedDate )

SET @WidgetID = SCOPE_IDENTITY()
RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Widget_ByKey]    Script Date: 2/13/2018 8:48:42 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Widget_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetID int = NULL
AS
/***********************************************************
Name:  WTest.up_Widget_ByKey
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Selects specific record from Widget, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	WidgetID
	, SKU
	, SerialNumber
	, CurrentStatusID
	, Cost
	, BilledAmount
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[WTest].[Widget]
WHERE
	WidgetID = @WidgetID

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Widget retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Shipment_d]    Script Date: 2/13/2018 8:48:43 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Shipment_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @WidgetGroupID int
    , @LastUpdatedBy varchar(50) = NULL
    , @LastUpdatedDate datetime2 = NULL
AS
/***********************************************************
Name:  WTest.up_Shipment_d
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard delete procedure for Shipment

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''



UPDATE [WTest].[Shipment]
SET
	IsDeleted = 1,
	LastUpdatedBy = @LastUpdatedBy,
	LastUpdatedDate = SYSUTCDATETIME()
WHERE
	WTest.Shipment.WidgetGroupID = @WidgetGroupID
AND LastUpdatedDate = @LastUpdatedDate

SELECT @__e = @@ERROR, @__r = @@ROWCOUNT

IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is Shipment.)'
END


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Shipment_u]    Script Date: 2/13/2018 8:48:45 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Shipment_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int
	, @BillingCustomerID uniqueidentifier
	, @ViaAddressLine nvarchar(200)
	, @ViaCity nvarchar(100)
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_Shipment_u    
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard update procedure for Shipment

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


UPDATE [WTest].[Shipment]
SET
	BillingCustomerID = @BillingCustomerID
	, ViaAddressLine = @ViaAddressLine
	, ViaCity = @ViaCity
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	WTest.Shipment.WidgetGroupID = @WidgetGroupID
-- Concurrency checking
AND	[WTest].[Shipment].LastUpdatedDate = @LastUpdatedDate


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is Shipment.)'
END


-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Shipment_i]    Script Date: 2/13/2018 8:48:44 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Shipment_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int = NULL OUTPUT
	, @BillingCustomerID uniqueidentifier = NULL
	, @ViaAddressLine nvarchar(200) = NULL
	, @ViaCity nvarchar(100) = NULL
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_Shipment_i
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard insert procedure for Shipment

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()

INSERT INTO [WTest].[Shipment] (
	WidgetGroupID
	, BillingCustomerID
	, ViaAddressLine
	, ViaCity
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@WidgetGroupID
	, @BillingCustomerID
	, @ViaAddressLine
	, @ViaCity
	, @LastUpdatedBy
	, @LastUpdatedDate )


RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_PhoneType_d]    Script Date: 2/13/2018 8:48:43 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_PhoneType_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @PhoneTypeID int
    , @LastUpdatedBy varchar(50) = NULL
    
AS
/***********************************************************
Name:  CEFTest.up_PhoneType_d
Date: 12/6/2017 9:35 PM
Author: System-generated
Description: Standard delete procedure for PhoneType

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''


DELETE [CEFTest].[PhoneType]
WHERE
	PhoneTypeID = @PhoneTypeID

SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Shipment_ByKey]    Script Date: 2/13/2018 8:48:44 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Shipment_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int = NULL
AS
/***********************************************************
Name:  WTest.up_Shipment_ByKey
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Selects specific record from Shipment, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	WidgetGroupID
	, BillingCustomerID
	, ViaAddressLine
	, ViaCity
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[WTest].[Shipment]
WHERE
	WidgetGroupID = @WidgetGroupID

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Shipment retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_PhoneType_u]    Script Date: 2/13/2018 8:48:43 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_PhoneType_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@PhoneTypeID int
	, @PhoneTypeDesc varchar(100)
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  CEFTest.up_PhoneType_u    
Date: 12/6/2017 9:35 PM
Author: System-generated
Description: Standard update procedure for PhoneType

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


UPDATE [CEFTest].[PhoneType]
SET
	PhoneTypeDesc = @PhoneTypeDesc
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	CEFTest.PhoneType.PhoneTypeID = @PhoneTypeID


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT



-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_PhoneType_i]    Script Date: 2/13/2018 8:48:49 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_PhoneType_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@PhoneTypeID int = NULL OUTPUT
	, @PhoneTypeDesc varchar(100) 
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  CEFTest.up_PhoneType_i
Date: 12/6/2017 9:35 PM
Author: System-generated
Description: Standard insert procedure for PhoneType

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()

INSERT INTO [CEFTest].[PhoneType] (
	PhoneTypeDesc
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@PhoneTypeDesc
	, @LastUpdatedBy
	, @LastUpdatedDate )

SET @PhoneTypeID = SCOPE_IDENTITY()
RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_PhoneType_ByKey]    Script Date: 2/13/2018 8:48:43 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_PhoneType_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@PhoneTypeID int = NULL
AS
/***********************************************************
Name:  CEFTest.up_PhoneType_ByKey
Date: 12/6/2017 9:35 PM
Author: System-generated
Description: Selects specific record from PhoneType, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	PhoneTypeID
	, PhoneTypeDesc
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[CEFTest].[PhoneType]
WHERE
	PhoneTypeID = @PhoneTypeID

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'PhoneType retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_PhoneType_ForList]    Script Date: 2/13/2018 8:48:48 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_PhoneType_ForList]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT
AS
/***********************************************************
Name:  CEFTest.up_PhoneType_ForList
Date: 12/6/2017 9:35 PM
Author: System-generated
Description: Standard select all for list procedure for PhoneType

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL</Value></UDP>
<UDP><Name>ProcedureWrapperClassName</Name><Value>PhoneType</Value></UDP>
<UDP><Name>ProcedureWrapperMethodName</Name><Value>RetrieveAll</Value></UDP>

Log:         
**********************************************************/
BEGIN

SELECT
	PhoneTypeID
	, PhoneTypeDesc
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[CEFTest].[PhoneType]


END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Person_ByParentPersonID]    Script Date: 2/13/2018 8:48:48 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Person_ByParentPersonID]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@ParentPersonID int
AS
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	PersonID
	, Name
	, Age
	, ParentPersonID
	, Gender
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[CEFTest].[Person]
WHERE
	ParentPersonID = @ParentPersonID

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Person retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Phone_ByPersonID]    Script Date: 2/13/2018 8:48:44 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Phone_ByPersonID]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@PersonID int,
	@PhoneTypeID int = NULL
AS
/***********************************************************
Name:  CEFTest.up_Phone_ByKey
Date: 12/8/2017 12:47 PM
Author: System-generated
Description: Selects specific record from Phone, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	PhoneID
	, PhoneTypeID
	, Number
	, PersonID
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[CEFTest].[Phone]
WHERE
	PersonID = @PersonID
AND	(@PhoneTypeID IS NULL OR PhoneTypeID = @PhoneTypeID);

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Phone retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Receipt_d]    Script Date: 2/13/2018 8:48:44 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Receipt_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @WidgetGroupID int
    , @LastUpdatedBy varchar(50) = NULL
    , @LastUpdatedDate datetime2 = NULL
AS
/***********************************************************
Name:  WTest.up_Receipt_d
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard delete procedure for Receipt

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''



UPDATE [WTest].[Receipt]
SET
	IsDeleted = 1,
	LastUpdatedBy = @LastUpdatedBy,
	LastUpdatedDate = SYSUTCDATETIME()
WHERE
	WTest.Receipt.WidgetGroupID = @WidgetGroupID
AND LastUpdatedDate = @LastUpdatedDate

SELECT @__e = @@ERROR, @__r = @@ROWCOUNT

IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is Receipt.)'
END


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Phone_d]    Script Date: 2/13/2018 8:48:44 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Phone_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @PhoneID int
    , @LastUpdatedBy varchar(50) = NULL
    
AS
/***********************************************************
Name:  CEFTest.up_Phone_d
Date: 12/18/2017 7:30 PM
Author: System-generated
Description: Standard delete procedure for Phone

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''


DELETE [CEFTest].[Phone]
WHERE
	PhoneID = @PhoneID

SELECT @__e = @@ERROR, @__r = @@ROWCOUNT

IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is Phone.)'
END


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Receipt_u]    Script Date: 2/13/2018 8:48:45 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Receipt_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int
	, @FromAddressLine nvarchar(200)
	, @FromCity nvarchar(100)
	, @FinalDestAddressLine nvarchar(200)
	, @FinalDestCity nvarchar(100)
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_Receipt_u    
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard update procedure for Receipt

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


UPDATE [WTest].[Receipt]
SET
	FromAddressLine = @FromAddressLine
	, FromCity = @FromCity
	, FinalDestAddressLine = @FinalDestAddressLine
	, FinalDestCity = @FinalDestCity
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	WTest.Receipt.WidgetGroupID = @WidgetGroupID
-- Concurrency checking
AND	[WTest].[Receipt].LastUpdatedDate = @LastUpdatedDate


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is Receipt.)'
END


-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Phone_u]    Script Date: 2/13/2018 8:48:45 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Phone_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@PhoneID int
	, @PhoneTypeID int
	, @Number varchar(20)
	, @PersonID int
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  CEFTest.up_Phone_u    
Date: 12/18/2017 7:30 PM
Author: System-generated
Description: Standard update procedure for Phone

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


IF @LastUpdatedDate IS NOT NULL AND NOT EXISTS
	(SELECT 0
	FROM [CEFTest].[Phone]
	WHERE CEFTest.Phone.PhoneID = @PhoneID
	AND LastUpdatedDate = @LastUpdatedDate)
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is Phone.)'
END

UPDATE [CEFTest].[Phone]
SET
	PhoneTypeID = @PhoneTypeID
	, Number = @Number
	, PersonID = @PersonID
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	CEFTest.Phone.PhoneID = @PhoneID


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is Phone.)'
END


-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Receipt_i]    Script Date: 2/13/2018 8:48:46 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Receipt_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int = NULL OUTPUT
	, @FromAddressLine nvarchar(200) 
	, @FromCity nvarchar(100) 
	, @FinalDestAddressLine nvarchar(200) = NULL
	, @FinalDestCity nvarchar(100) = NULL
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_Receipt_i
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard insert procedure for Receipt

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()

INSERT INTO [WTest].[Receipt] (
	WidgetGroupID
	, FromAddressLine
	, FromCity
	, FinalDestAddressLine
	, FinalDestCity
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@WidgetGroupID
	, @FromAddressLine
	, @FromCity
	, @FinalDestAddressLine
	, @FinalDestCity
	, @LastUpdatedBy
	, @LastUpdatedDate )


RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Phone_i]    Script Date: 2/13/2018 8:48:49 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Phone_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@PhoneID int = NULL OUTPUT
	, @PhoneTypeID int 
	, @Number varchar(20) 
	, @PersonID int = NULL
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  CEFTest.up_Phone_i
Date: 12/18/2017 7:30 PM
Author: System-generated
Description: Standard insert procedure for Phone

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()

INSERT INTO [CEFTest].[Phone] (
	PhoneTypeID
	, Number
	, PersonID
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@PhoneTypeID
	, @Number
	, @PersonID
	, @LastUpdatedBy
	, @LastUpdatedDate )

SET @PhoneID = SCOPE_IDENTITY()
RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Phone_ByKey]    Script Date: 2/13/2018 8:48:45 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Phone_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@PhoneID int = NULL
AS
/***********************************************************
Name:  CEFTest.up_Phone_ByKey
Date: 12/18/2017 7:30 PM
Author: System-generated
Description: Selects specific record from Phone, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	PhoneID
	, PhoneTypeID
	, Number
	, PersonID
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[CEFTest].[Phone]
WHERE
	PhoneID = @PhoneID

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Phone retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Phone_ForList]    Script Date: 2/13/2018 8:48:47 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Phone_ForList]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT
AS
/***********************************************************
Name:  CEFTest.up_Phone_ForList
Date: 12/18/2017 7:30 PM
Author: System-generated
Description: Standard select all for list procedure for Phone

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL</Value></UDP>
<UDP><Name>ProcedureWrapperClassName</Name><Value>Phone</Value></UDP>
<UDP><Name>ProcedureWrapperMethodName</Name><Value>RetrieveAll</Value></UDP>

Log:         
**********************************************************/
BEGIN

SELECT
	PhoneID
	, PhoneTypeID
	, Number
	, PersonID
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[CEFTest].[Phone]


END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Person_d]    Script Date: 2/13/2018 8:48:46 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Person_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @PersonID int
    , @LastUpdatedBy varchar(50) = NULL
    , @LastUpdatedDate datetime2 = NULL
AS
/***********************************************************
Name:  CEFTest.up_Person_d
Date: 12/18/2017 7:30 PM
Author: System-generated
Description: Standard delete procedure for Person

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''



UPDATE [CEFTest].[Person]
SET
	IsDeleted = 1,
	LastUpdatedBy = @LastUpdatedBy,
	LastUpdatedDate = SYSUTCDATETIME()
WHERE
	CEFTest.Person.PersonID = @PersonID
AND LastUpdatedDate = @LastUpdatedDate

SELECT @__e = @@ERROR, @__r = @@ROWCOUNT

IF @__r = 0
BEGIN
	SET @Msg = 'Database error - row in Person was updated or deleted by someone else prior to saving - cannot delete row.'
	RAISERROR (@Msg, 16, 1)
END


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Person_u]    Script Date: 2/13/2018 8:48:47 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Person_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@PersonID int
	, @Name varchar(100)
	, @Age int
	, @ParentPersonID int
	, @Gender char(1)
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  CEFTest.up_Person_u    
Date: 12/18/2017 7:30 PM
Author: System-generated
Description: Standard update procedure for Person

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


UPDATE [CEFTest].[Person]
SET
	Name = @Name
	, Age = @Age
	, ParentPersonID = @ParentPersonID
	, Gender = @Gender
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	CEFTest.Person.PersonID = @PersonID
-- Concurrency checking
AND	[CEFTest].[Person].LastUpdatedDate = @LastUpdatedDate


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


IF @__r = 0
BEGIN
    SET @Msg = 'Database error - row in Person was updated or deleted by someone else prior to saving - cannot update row.'
    RAISERROR (@Msg, 16, 1)
END

-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Person_i]    Script Date: 2/13/2018 8:48:46 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Person_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@PersonID int = NULL OUTPUT
	, @Name varchar(100) 
	, @Age int 
	, @ParentPersonID int = NULL
	, @Gender char(1) = NULL
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  CEFTest.up_Person_i
Date: 12/18/2017 7:30 PM
Author: System-generated
Description: Standard insert procedure for Person

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()

INSERT INTO [CEFTest].[Person] (
	Name
	, Age
	, ParentPersonID
	, Gender
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@Name
	, @Age
	, @ParentPersonID
	, @Gender
	, @LastUpdatedBy
	, @LastUpdatedDate )

SET @PersonID = SCOPE_IDENTITY()
RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Person_ByKey]    Script Date: 2/13/2018 8:48:46 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Person_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@PersonID int = NULL
AS
/***********************************************************
Name:  CEFTest.up_Person_ByKey
Date: 12/18/2017 7:30 PM
Author: System-generated
Description: Selects specific record from Person, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	PersonID
	, Name
	, Age
	, ParentPersonID
	, Gender
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[CEFTest].[Person]
WHERE
	PersonID = @PersonID

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Person retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Customer_d]    Script Date: 2/13/2018 8:48:47 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Customer_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @CustomerID uniqueidentifier
    , @LastUpdatedBy varchar(50) = NULL
    , @LastUpdatedDate datetime2 = NULL
AS
/***********************************************************
Name:  WTest.up_Customer_d
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard delete procedure for Customer

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''



UPDATE [WTest].[Customer]
SET
	IsDeleted = 1,
	LastUpdatedBy = @LastUpdatedBy,
	LastUpdatedDate = SYSUTCDATETIME()
WHERE
	WTest.Customer.CustomerID = @CustomerID
AND LastUpdatedDate = @LastUpdatedDate

SELECT @__e = @@ERROR, @__r = @@ROWCOUNT

IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is Customer.)'
END


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Person_ForList]    Script Date: 2/13/2018 8:48:49 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Person_ForList]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT
AS
/***********************************************************
Name:  CEFTest.up_Person_ForList
Date: 12/18/2017 7:30 PM
Author: System-generated
Description: Standard select all for list procedure for Person

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL</Value></UDP>
<UDP><Name>ProcedureWrapperClassName</Name><Value>Person</Value></UDP>
<UDP><Name>ProcedureWrapperMethodName</Name><Value>RetrieveAll</Value></UDP>

Log:         
**********************************************************/
BEGIN

SELECT
	PersonID
	, Name
	, Age
	, ParentPersonID
	, Gender
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[CEFTest].[Person]


END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Customer_u]    Script Date: 2/13/2018 8:48:47 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Customer_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@CustomerID uniqueidentifier
	, @Name nvarchar(200)
	, @AddressLine nvarchar(200)
	, @City nvarchar(100)
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_Customer_u    
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard update procedure for Customer

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


UPDATE [WTest].[Customer]
SET
	Name = @Name
	, AddressLine = @AddressLine
	, City = @City
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	WTest.Customer.CustomerID = @CustomerID
-- Concurrency checking
AND	[WTest].[Customer].LastUpdatedDate = @LastUpdatedDate


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


IF @RetVal = 1 AND @__r = 0
BEGIN
	SET @RetVal = 2
	SET @Msg = 'Warning:  The record has been updated or deleted by another connection after this particular record was originally retrieved in the current session.  (Table is Customer.)'
END


-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Customer_i]    Script Date: 2/13/2018 8:48:47 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Customer_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@CustomerID uniqueidentifier = NULL OUTPUT
	, @Name nvarchar(200) 
	, @AddressLine nvarchar(200) 
	, @City nvarchar(100) 
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_Customer_i
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Standard insert procedure for Customer

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()
IF @CustomerID IS NULL SET @CustomerID=NEWID()

INSERT INTO [WTest].[Customer] (
	CustomerID
	, Name
	, AddressLine
	, City
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@CustomerID
	, @Name
	, @AddressLine
	, @City
	, @LastUpdatedBy
	, @LastUpdatedDate )


RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Customer_ByKey]    Script Date: 2/13/2018 8:48:47 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Customer_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@CustomerID uniqueidentifier = NULL
AS
/***********************************************************
Name:  WTest.up_Customer_ByKey
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Selects specific record from Customer, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	CustomerID
	, Name
	, AddressLine
	, City
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[WTest].[Customer]
WHERE
	CustomerID = @CustomerID

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Customer retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetReview_d]    Script Date: 2/13/2018 8:48:48 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetReview_d]
    @RetVal int = NULL OUTPUT,
    @Msg varchar(200) = NULL OUTPUT,
    @SKU varchar(20)
	, @Username varchar(50)
    , @LastUpdatedBy varchar(50) = NULL
    , @LastUpdatedDate datetime2 = NULL
AS
/***********************************************************
Name:  WTest.up_WidgetReview_d
Date: 2/10/2018 7:06 PM
Author: System-generated
Description: Standard delete procedure for WidgetReview

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''



UPDATE [WTest].[WidgetReview]
SET
	IsDeleted = 1,
	LastUpdatedBy = @LastUpdatedBy,
	LastUpdatedDate = SYSUTCDATETIME()
WHERE
	WTest.WidgetReview.SKU = @SKU AND WTest.WidgetReview.Username = @Username


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT


RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetReview_u]    Script Date: 2/13/2018 8:48:48 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetReview_u]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@SKU varchar(20)
	, @Username varchar(50)
	, @Rating tinyint
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_WidgetReview_u    
Date: 2/10/2018 7:06 PM
Author: System-generated
Description: Standard update procedure for WidgetReview

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
DECLARE @__r int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

DECLARE @NewLastUpdatedDate datetime2
SET @NewLastUpdatedDate = SYSUTCDATETIME()


UPDATE [WTest].[WidgetReview]
SET
	Rating = @Rating
	, LastUpdatedBy = @LastUpdatedBy
	, LastUpdatedDate = @NewLastUpdatedDate
WHERE
	WTest.WidgetReview.SKU = @SKU AND WTest.WidgetReview.Username = @Username


SELECT @__e = @@ERROR, @__r = @@ROWCOUNT



-- We will return new LastUpdatedDate
SET @LastUpdatedDate = @NewLastUpdatedDate

RETURN @__r
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetReview_i]    Script Date: 2/13/2018 8:48:48 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetReview_i]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@SKU varchar(20) = NULL OUTPUT
	, @Username varchar(50) = NULL OUTPUT
	, @Rating tinyint 
	, @LastUpdatedBy varchar(50)
	, @LastUpdatedDate datetime2 = NULL OUTPUT
AS
/***********************************************************
Name:  WTest.up_WidgetReview_i
Date: 2/10/2018 7:06 PM
Author: System-generated
Description: Standard insert procedure for WidgetReview

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>

Log:         
**********************************************************/
BEGIN

SET NOCOUNT ON
DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SET @LastUpdatedDate = SYSUTCDATETIME()

INSERT INTO [WTest].[WidgetReview] (
	SKU
	, Username
	, Rating
	, LastUpdatedBy
	, LastUpdatedDate )
VALUES (
	@SKU
	, @Username
	, @Rating
	, @LastUpdatedBy
	, @LastUpdatedDate )


RETURN 1
END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetReview_ByKey]    Script Date: 2/13/2018 8:48:49 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetReview_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@SKU varchar(20) = NULL
	, @Username varchar(50) = NULL
AS
/***********************************************************
Name:  WTest.up_WidgetReview_ByKey
Date: 2/10/2018 7:06 PM
Author: System-generated
Description: Selects specific record from WidgetReview, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL, NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	SKU
	, Username
	, Rating
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[WTest].[WidgetReview]
WHERE
	SKU = @SKU AND Username = @Username

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'WidgetReview retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Receipt_ByKey]    Script Date: 2/13/2018 8:48:49 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Receipt_ByKey]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@WidgetGroupID int = NULL
AS
/***********************************************************
Name:  WTest.up_Receipt_ByKey
Date: 2/6/2018 4:03 PM
Author: System-generated
Description: Selects specific record from Receipt, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	r.WidgetGroupID
	, r.FromAddressLine
	, r.FromCity
	, r.FinalDestAddressLine
	, r.FinalDestCity
	, r.LastUpdatedBy
	, r.LastUpdatedDate
	, w.CustomerID
	, w.GroupNumber
FROM
	[WTest].[Receipt] r
	JOIN WTest.WidgetGroup w
		ON r.WidgetGroupID = w.WidgetGroupID
WHERE
	r.WidgetGroupID = @WidgetGroupID

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Receipt retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Phone_AllForFamily]    Script Date: 2/13/2018 8:48:49 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Phone_AllForFamily]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@PersonID int 
AS
/***********************************************************
Name:  CEFTest.up_Phone_ByKey
Date: 12/8/2017 12:47 PM
Author: System-generated
Description: Selects specific record from Phone, by key

<UDP><Name>SystemGenerated</Name><Value>True</Value></UDP>
<UDP><Name>NullRunParameters</Name><Value>NULL,NULL,NULL</Value></UDP>

Log:         
**********************************************************/
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	PhoneID
	, PhoneTypeID
	, Number
	, PersonID
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[CEFTest].[Phone]
WHERE
	PersonID = @PersonID
UNION ALL
SELECT
	PhoneID
	, PhoneTypeID
	, Number
	, h.PersonID
	, h.LastUpdatedBy
	, h.LastUpdatedDate
FROM
	[CEFTest].[Person] p
	JOIN [CEFTest].[Phone] h
		ON p.PersonID = h.PersonID
WHERE
	p.ParentPersonID = @PersonID;

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Phone retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [CEFTest].[up_Person_SummaryForParents]    Script Date: 2/13/2018 8:48:49 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE CEFTest.[up_Person_SummaryForParents]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@MinimumAge int = NULL
AS
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	PersonID
	, [Name]
	, Age
	, ParentPersonID
	, Gender
	, LastUpdatedBy
	, LastUpdatedDate
	, (SELECT COUNT(*)
		FROM CEFTest.Person c
		WHERE c.ParentPersonID = p.PersonID
		AND c.Gender = 'M') AS MaleChildren
	, (SELECT COUNT(*)
		FROM CEFTest.Person c
		WHERE c.ParentPersonID = p.PersonID
		AND c.Gender = 'F') AS FemaleChildren
	, (SELECT COUNT(*)
		FROM CEFTest.Phone ph
		WHERE p.PersonID = ph.PersonID) +
	  (SELECT COUNT(*)
	  	FROM CEFTest.Person c
	  		JOIN CEFTest.Phone cph
	  			ON c.PersonID = cph.PersonID
	  	WHERE c.ParentPersonID = p.PersonID) AS FamilyPhones
FROM
	[CEFTest].[Person] p
WHERE
	(@MinimumAge IS NULL OR p.Age >= @MinimumAge)
AND	EXISTS
	(SELECT 0
	FROM CEFTest.Person c
	WHERE p.PersonID = c.ParentPersonID)
ORDER BY
	(SELECT COUNT(*)
	FROM CEFTest.Person c
	WHERE c.ParentPersonID = p.PersonID) DESC, Age DESC;

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Person retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_Receipt_ByReceiptNumber]    Script Date: 2/13/2018 8:48:49 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Receipt_ByReceiptNumber]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@ReceiptNumber varchar(20)
AS
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	r.WidgetGroupID
	, r.FromAddressLine
	, r.FromCity
	, r.FinalDestAddressLine
	, r.FinalDestCity
	, r.LastUpdatedBy
	, r.LastUpdatedDate
	, w.CustomerID
	, w.GroupNumber
FROM
	[WTest].[Receipt] r
	JOIN WTest.WidgetGroup w
		ON r.WidgetGroupID = w.WidgetGroupID
WHERE
	w.GroupNumber = @ReceiptNumber;

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Receipt retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/*    ==Scripting Parameters==

    Source Server Version : SQL Server 2016 (13.0.1742)
    Source Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Source Database Engine Type : Standalone SQL Server

    Target Server Version : SQL Server 2016
    Target Database Engine Edition : Microsoft SQL Server Enterprise Edition
    Target Database Engine Type : Standalone SQL Server
*/

/****** Object:  StoredProcedure [WTest].[up_WidgetGroupItem_Items]    Script Date: 2/13/2018 8:48:49 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_WidgetGroupItem_Items]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@GroupNumber varchar(20),
	@ReviewsSince datetime = NULL
AS
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	i.WidgetGroupID
	, i.WidgetID
	, i.TrackingNumber
	, i.LastUpdatedBy
	, i.LastUpdatedDate
	, (SELECT AVG(CONVERT(float, r.Rating))
		FROM WTest.WidgetReview r
			JOIN WTest.Widget w
				ON r.SKU = w.SKU
		WHERE
			w.WidgetID = i.WidgetID
		AND	r.LastUpdatedDate >= ISNULL(@ReviewsSince, '1/1/1900')) AS AvgRating
FROM
	[WTest].[WidgetGroupItem] i
	JOIN WTest.WidgetGroup g
		ON i.WidgetGroupID = g.WidgetGroupID
WHERE
	g.GroupNumber = @GroupNumber;

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'WidgetGroupItem retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO

/****** Object:  Index [NDX_Widget_SKU]    Script Date: 5/13/2018 6:45:50 AM ******/
IF (SELECT COUNT(*) FROM sys.objects o JOIN sys.columns c ON o.[object_id]=c.[object_id] WHERE o.[object_id]=OBJECT_ID(N'[WTest].[Widget]') AND c.[name] IN ('SKU','SerialNumber'))>=2 AND NOT EXISTS (SELECT 0 FROM sys.indexes i WHERE i.name='NDX_Widget_SKU' AND i.[object_id]=OBJECT_ID(N'[WTest].[Widget]'))
CREATE UNIQUE NONCLUSTERED INDEX [NDX_Widget_SKU] ON [WTest].[Widget]
(
	[SKU] ASC,
	[SerialNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

-- This is how it looks in source and would be executed in target
/****** Object:  StoredProcedure [WTest].[up_Widget_ByTypeSerial]    Script Date: 5/13/2018 6:45:52 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Widget_ByTypeSerial]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT,
	@SKU varchar(20),
	@SerialNumber varchar(20)
AS
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

SELECT
	WidgetID
	, SKU
	, SerialNumber
	, CurrentStatusID
	, Cost
	, BilledAmount
	, LastUpdatedBy
	, LastUpdatedDate
FROM
	[WTest].[Widget]
WHERE
	SKU = @SKU
AND	SerialNumber = @SerialNumber;

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Widget retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO


-- This is how it looks in source and would be executed in target
/****** Object:  StoredProcedure [WTest].[up_Widget_TestCleanup]    Script Date: 5/13/2018 6:45:52 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE WTest.[up_Widget_TestCleanup]
	@RetVal int = NULL OUTPUT,
	@Msg varchar(200) = NULL OUTPUT
AS
BEGIN

DECLARE @__e int
SET @__e = 0
SET @RetVal = 1
SET @Msg = ''

-- Delete widget reviews
UPDATE r
SET isdeleted=1
FROM WTest.WidgetReview r
WHERE (r.SKU LIKE 'WX%' OR r.SKU LIKE 'A0%');

-- Delete group items
UPDATE i
SET isdeleted=1
FROM WTest.WidgetGroupItem i
	JOIN WTest.Widget w
		ON i.WidgetID = w.WidgetID
WHERE (w.SKU LIKE 'WX%' OR w.SKU LIKE 'A0%');

-- Delete receipts
UPDATE r
SET isdeleted=1
FROM WTest.Receipt r
	JOIN WTest.WidgetGroup wg
		ON r.WidgetGroupID = wg.WidgetGroupID
	JOIN WTest.Customer c
		ON wg.CustomerID = c.CustomerID
WHERE
	c.NAME LIKE 'CustX%';

-- Delete widget groups
UPDATE wg
SET isdeleted=1
FROM WTest.WidgetGroup wg
	JOIN WTest.Customer c
		ON wg.CustomerID = c.CustomerID
WHERE
	c.NAME LIKE 'CustX%';

-- Delete customers
UPDATE c
SET isdeleted=1
FROM WTest.Customer c
WHERE c.NAME LIKE 'CustX%';

-- Delete widgets
UPDATE w
SET isdeleted=1
FROM WTest.Widget w
WHERE (w.SKU LIKE 'WX%' OR w.SKU LIKE 'A0%');

SELECT @__e = @@ERROR

IF @__e <> 0
BEGIN
    IF @RetVal = 1
    BEGIN
        SET @RetVal = 3
        SET @Msg = 'Widget retrieve by key failed with code ' + CONVERT(varchar, @__e)
    END
END

END
GO

/*********** REFERENCE DATA ************/

SET IDENTITY_INSERT [CEFTest].[PhoneType] ON
GO
INSERT [CEFTest].[PhoneType] ([PhoneTypeID],[PhoneTypeDesc],[LastUpdatedBy],[LastUpdatedDate]) VALUES (1,N'Home',N'demo','31-Dec-2017 09:04:47.99 PM')
GO
INSERT [CEFTest].[PhoneType] ([PhoneTypeID],[PhoneTypeDesc],[LastUpdatedBy],[LastUpdatedDate]) VALUES (2,N'Work',N'demo','31-Dec-2017 09:04:47.99 PM')
GO
INSERT [CEFTest].[PhoneType] ([PhoneTypeID],[PhoneTypeDesc],[LastUpdatedBy],[LastUpdatedDate]) VALUES (3,N'Mobile',N'demo','31-Dec-2017 09:04:47.99 PM')
GO
SET IDENTITY_INSERT [CEFTest].[PhoneType] OFF
GO
INSERT [WTest].[WidgetStatus] ([ID],[StatusDesc],[StatusCode],[LastUpdatedBy],[LastUpdatedDate],[IsDeleted]) VALUES (1,N'Pending',N'PEND',N'demo','30-Jan-2018 02:28:56.9599998 PM',0)
GO
INSERT [WTest].[WidgetStatus] ([ID],[StatusDesc],[StatusCode],[LastUpdatedBy],[LastUpdatedDate],[IsDeleted]) VALUES (2,N'Received',N'RECV',N'demo','30-Jan-2018 02:29:03.4276908 PM',0)
GO
INSERT [WTest].[WidgetStatus] ([ID],[StatusDesc],[StatusCode],[LastUpdatedBy],[LastUpdatedDate],[IsDeleted]) VALUES (3,N'Processed',N'PROC',N'demo','30-Jan-2018 02:29:09.1195653 PM',0)
GO
INSERT [WTest].[WidgetStatus] ([ID],[StatusDesc],[StatusCode],[LastUpdatedBy],[LastUpdatedDate],[IsDeleted]) VALUES (4,N'Shipped',N'SHIP',N'demo','30-Jan-2018 02:29:15.6985091 PM',0)
GO
INSERT [WTest].[WidgetType] ([SKU],[Description],[LastUpdatedBy],[LastUpdatedDate],[IsDeleted]) VALUES (N'A001',N'Big Widget',N'demo','30-Jan-2018 02:48:26.7074467 PM',0)
GO
INSERT [WTest].[WidgetType] ([SKU],[Description],[LastUpdatedBy],[LastUpdatedDate],[IsDeleted]) VALUES (N'A002',N'Small Widget',N'demo','30-Jan-2018 02:48:31.3180671 PM',0)
GO
INSERT [WTest].[WidgetType] ([SKU],[Description],[LastUpdatedBy],[LastUpdatedDate],[IsDeleted]) VALUES (N'A003',N'Green Widget',N'demo','30-Jan-2018 02:48:39.5440406 PM',0)
GO
INSERT [WTest].[WidgetType] ([SKU],[Description],[LastUpdatedBy],[LastUpdatedDate],[IsDeleted]) VALUES (N'B001',N'Shiny Widget',N'demo','30-Jan-2018 02:48:49.1692603 PM',0)
GO
